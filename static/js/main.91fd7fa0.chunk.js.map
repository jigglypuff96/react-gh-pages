{"version":3,"sources":["sortingAlgorithms/mergeSortAlgorithm.js","sortingAlgorithms/quickSortAlgorithm.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSortAlgorithm.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","arrayTemp","slice","mergeSortHelper","arrayMain","startIdx","endIdx","middleIdx","Math","floor","k","i","j","size","push","index","doMerge","getQuickSortAnimations","quickSortHelper","lowIdx","highIdx","pivot","pivot_item","left","right","temp","Partition","ANIMATION_SPEED_MS","PRIMARY_COLOR","SECONDARY_COLOR","PIVOT_COLOR","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","changeColor","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickAnimation","barOneNewHeight","barTwoNewHeight","bubbleAnimation","pass","bubbleSortHelper","getBubbleSortAnimations","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","className","map","value","idx","onClick","class","mergeSort","quickSort","bubbleSort","React","Component","min","max","random","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.91fd7fa0.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const arrayTemp = array.slice();\n    mergeSortHelper(array, arrayTemp, 0, array.length - 1, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    arrayMain,\n    arrayTemp,\n    startIdx,\n    endIdx,\n    animations,\n  ) {\n    if (endIdx > startIdx) {\n      const middleIdx = Math.floor((startIdx + endIdx) / 2);\n      mergeSortHelper(arrayMain, arrayTemp, startIdx, middleIdx, animations);\n      mergeSortHelper(arrayMain, arrayTemp, middleIdx + 1, endIdx, animations);\n      doMerge(arrayMain, arrayTemp, startIdx, middleIdx + 1, endIdx, animations);\n    }\n  }\n  \n  function doMerge(\n    arrayMain,\n    arrayTemp,\n    startIdx,\n    middleIdx,\n    endIdx,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx;\n    let size = endIdx - startIdx + 1;\n    while (i <= middleIdx-1 && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j,true]);\n      animations.push([i, j,false]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      // animations.push([i, j]);\n      if (arrayMain[i] <= arrayMain[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, arrayMain[i]]);\n        arrayTemp[k++] = arrayMain[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, arrayMain[j]]);\n        arrayTemp[k++] = arrayMain[j++];\n      }\n    }\n    while (i <= middleIdx-1) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i,true]);\n      animations.push([i, i,false]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      // animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, arrayMain[i]]);\n      arrayTemp[k++] = arrayMain[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j,true]);\n      animations.push([j, j,false]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      // animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, arrayMain[j]]);\n      arrayTemp[k++] = arrayMain[j++];\n    }\n    for (let index = 0; index<=size; index++){\n      arrayMain[endIdx] = arrayTemp[endIdx];\n      endIdx--;\n    }\n  }\n  ","export function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quickSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n}\nfunction quickSortHelper(\n    array,\n    lowIdx,\n    highIdx,\n    animations,\n){\n    let pivot = lowIdx;\n    if (highIdx > lowIdx){\n        pivot = Partition(array,lowIdx,highIdx,animations);\n        quickSortHelper(array,lowIdx,pivot-1,animations);\n        quickSortHelper(array,pivot+1,highIdx,animations);\n    }\n}\n\nfunction Partition(\n    array,\n    lowIdx,\n    highIdx,\n    animations,\n){\n    let pivot_item = array[lowIdx];\n    let left = lowIdx;\n    let right = highIdx;\n    while (left < right){\n        while (array[left] <= pivot_item){\n            animations.push([left, lowIdx, true]);\n            left++;\n        }\n        while (array[right] > pivot_item){\n            animations.push([right, lowIdx, false]);\n            right--;\n        }\n        if (left<right){\n            animations.push([left,right,array[right],array[left]]);\n            let temp = array[right];\n            array[right] = array[left];\n            array[left] = temp;\n        }\n    }\n    animations.push([lowIdx,right,array[right],pivot_item]);\n    array[lowIdx] = array[right];\n    array[right] = pivot_item;\n    return right;\n}\n","import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSortAlgorithm.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSortAlgorithm.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSortAlgorithm.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 100;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 10;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nconst PIVOT_COLOR = 'purple';\n\nconst SMALLER_COLOR = 'blue';\nconst GREATER_COLOR = 'yellow';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx, changeColor] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = changeColor === true ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    var quickAnimation;\n    let i = 0;\n    for (quickAnimation of animations) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const barOneIdx = quickAnimation[0];\n      const barTwoIdx = quickAnimation[1];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      if (quickAnimation.length === 3) {\n        const color = quickAnimation[2] === true ? SMALLER_COLOR : GREATER_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = PIVOT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      } else {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        const barOneNewHeight = quickAnimation[2];\n        const barTwoNewHeight = quickAnimation[3];\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      }\n    }\n  }\n\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    var bubbleAnimation;\n    let i = 0;\n    for (bubbleAnimation of animations) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const barOneIdx = bubbleAnimation[0];\n      const barTwoIdx = bubbleAnimation[1];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      setTimeout(() => {\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\n        barTwoStyle.backgroundColor = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n      i++;\n      if (bubbleAnimation.length > 2) {\n        const barOneNewHeight = bubbleAnimation[2];\n        const barTwoNewHeight = bubbleAnimation[3];\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PIVOT_COLOR;\n          barTwoStyle.backgroundColor = PIVOT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      }\n      setTimeout(() => {\n        barOneStyle.backgroundColor = PRIMARY_COLOR;\n        barTwoStyle.backgroundColor = PRIMARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n      i++;\n    }\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"array-container\">\n        <h1 className=\"title\">My Sorting Visualizer</h1>\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <p>Hit \"Generate New Array\" first and then pick one of your favorite sorting algorithms. Let's go!</p>\n        <button onClick={() => this.resetArray()} class=\"generate-new\">Generate New Array</button>\n        <button onClick={() => this.mergeSort()} class=\"sort-algo\">Merge Sort</button>\n        <button onClick={() => this.quickSort()} class=\"sort-algo\">Quick Sort</button>\n        <button onClick={() => this.bubbleSort()} class=\"sort-algo\">Bubble Sort</button>\n        {/* <button onClick={() => this.testSortingAlgorithms()}>\n          Test Sorting Algorithms (BROKEN)\n        </button> */}\n      </div>\n\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","export function getBubbleSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    bubbleSortHelper(array, array.length - 1, animations);\n    return animations;\n  }\n  function bubbleSortHelper(\n    array,\n    endIdx,\n    animations,\n  ) {\n    for (let pass = endIdx; pass >= 0; pass--){\n        for (let i = 0; i <= pass - 1; i++){\n            if (array[i] > array[i+1]){\n                animations.push([i,i+1,array[i+1],array[i]]);\n                let temp = array[i];\n                array[i] = array[i+1];\n                array[i+1] = temp;\n            }\n            else {\n                animations.push([i,i+1]);\n            }\n        }\n    }\n  }","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}